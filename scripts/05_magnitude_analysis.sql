/*
===============================================================================
Magnitude Analysis
===============================================================================
Purpose:
    - To quantify data and group results by specific dimensions.
    - For understanding data distribution across categories.

SQL Functions Used:
    - Aggregate Functions: SUM(), COUNT(), AVG()
    - GROUP BY, ORDER BY
===============================================================================
*/
use Datawarehouse;
--Find total customers by country

select country,
count(customer_key) as total_customer 
from gold.dim_customers
group by country
order by count(customer_key) desc;

--Find total customers by gender
select gender,
count(customer_key) as total_customer 
from gold.dim_customers
group by gender
order by count(customer_key) desc;

--Find total products by category

select category,
	COUNT(product_id) as total_product
from gold.dim_products
group by category
order by COUNT(product_id) desc;

--what is the average costs in each category?
select category,
	avg(product_cost) as total_product
from gold.dim_products
group by category
order by avg(product_cost) desc;

--what is the total revenue generated for each category?

select 
	dp.category,
	sum(fs.sales) as total_revenue 
from gold.fact_sales fs
left join gold.dim_products dp
on fs.product_key = dp.product_key
group by dp.category
order by total_revenue desc


--Find total revenue is generated by each customer
select * from gold.dim_customers
select * from gold.fact_sales
select 
	dc.customer_key,
	dc.first_name,
	dc.last_name,
	sum(fs.sales) as total_revenue 
from gold.fact_sales fs
left join gold.dim_customers dc
on fs.customer_key = dc.customer_key
group by 
dc.customer_key,
	dc.first_name,
	dc.last_name
order by total_revenue desc

--what is the distribution of sold items across countries?
select 
	dc.country,
	sum(fs.quantity) as total_quantity
from gold.fact_sales fs
left join gold.dim_customers dc
on fs.customer_key = dc.customer_key
group by 
	dc.country
order by total_quantity desc
